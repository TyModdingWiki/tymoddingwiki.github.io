{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#welcome-to-the-ty-modding-wiki","title":"Welcome to the Ty modding wiki!","text":"<p>This wiki contains modding documentation discovered by the Ty modding community, all sorted in one place</p> <p>To get started with modding you can follow the the getting started guides here: Ty 1 Getting Started Ty 2 Getting Started</p> <p>To get started with developing plugins for TygerFramework you can follow the getting started guide here: TygerFramework Getting Started</p> <p>You can also navigate through the tabs or use the search bar to find what you need, the wiki is still a work in progress and more is being added as it gets discovered. If you have any questions about anything Ty modding related feel free to join the Ty modding discord</p>"},{"location":"Ty1/","title":"Getting Started","text":"<p>This page will walk you through the basics you'll need to know to get started with modding Ty 1.</p>"},{"location":"Ty1/#extracting-the-rkvs","title":"Extracting the rkvs","text":"<p>To get started with extracting the rkvs to edit the game files you'll need Koushi's tool called rkvMT (or Chippy's rkv extractor, but for this guide we'll use rkvMT)  </p> <ul> <li>Download rkvMT here https://github.com/tanoshiikoushi/rkvMT/releases</li> <li>After downloading launch the exe, it'll open up a console window, but don't worry its not too complex to use</li> <li>First load the rkv you want to extract, the main rkv you'll probably want to extract is Data_PC.rkv, which contains most of the game's files. For this example I'll load the rkv into the out slot. You can more easily enter the file by dragging the rkv from file explorer into the rkvMT console window, and it'll write the path for you. (You can also do this with folders too) <pre><code>load \"C:/path/to/Data_PC.rkv\" out\n</code></pre></li> <li>Next extract the whole rkv that was loaded into the out slot to any folder you want <pre><code>extract out * \"C:/path/to/extract/to\" true\n</code></pre></li> <li>Now just wait for it to extract all the files and you're done</li> </ul>"},{"location":"Ty1/#editing-the-files","title":"Editing the files","text":"<p>Now that you have the files extracted you may be wondering how to edit them, below are some of the ways you can edit some common files. All of the files mentioned below are all stored in <code>Data_PC.rkv</code>.</p> <p>If the kind of file you're looking for isn't listed below, either try searching the wiki or ask in the modding discord.</p>"},{"location":"Ty1/#textures","title":"Textures","text":"<p>Editing the texture files is pretty simple, they're all stored in the <code>DDS folder</code> and can easily be opened by basically any image editing software (like gimp). To export the dds files there is certain format settings to make sure that you use depending on the texture file. Its also recommended to enable generating mipmaps too</p> <p>If the texture has <code>no transparency</code> export the dds with the <code>DXT1</code> format</p> <p>If the texture <code>has transparency</code> export it with the <code>DXT5</code> format</p> <p>If you don't use those setting the colour channels will be flipped, or the transparency won't work.</p>"},{"location":"Ty1/#level-object-placement","title":"Level object placement","text":"<p>Level object files are pretty easy to edit as they're just plain text, you can just open the <code>.lv2</code> files in any text editor. Unfortunately right now there is no level editor to easily edit the object placement in levels, but there is 2 ways to help place objects. </p> <p>There is a program called Ty pos which displays Ty's in game coordinates, which helps to figure out where to place objects. There is 3 different versions:</p> <ul> <li>Pixel's version (In the Ty speedrunning discord)</li> <li>Buzchy's version which includes rotation https://github.com/Senashu/TyPos-Rotation</li> <li>Matt's version (In the modding discord) which includes logging but no rotation.</li> </ul> <p>The second way is with Floralz's WIP lv2 exporter plugin for blender, not every custom property is currently supported for the lv2, but it does help to place objects easier for the ones it does support. You can download the plugin from the modding discord here, and Floralz's messages below explain how to use it (Note: any lv2 object can be any mesh (not just a plane) as long as the collection its in uses the name of the object you want it to be in the lv2).</p>"},{"location":"Ty1/#object-properties","title":"Object properties","text":"<p>A lot of the object properties are stored within the <code>global.model</code> file, which is also plain text, so just open it with any text editor. The file contains alot of different properties like stuff about enemies, the boomerangs, render distances, etc. Not everything is in that file though and some are hard coded in the exe.</p> <p>There is another similar file called <code>global.mad</code>, which is also, you guessed it, plain text. This file contains properties that materials and collision materials have, like if it has grass on it, what sound to make, what particle effect to make, is it slippery, etc. All the property IDs are listed at the top of the file, and multiple properties can be combined by just adding the numbers together.</p>"},{"location":"Ty1/#models","title":"Models","text":"<p>Models are stored in the <code>.mdl</code> files and can be imported and exported in blender using Kana's Ty 1 mdl plugin. All the documentation on how to install and use the plugin is on the Editing MDL Models Page.</p>"},{"location":"Ty1/#loading-modified-game-files","title":"Loading modified game files","text":"<p>There is 2 different ways to load the files you've modified into the game, either using the PC_External folder or creating a Patch_PC.rkv. Using PC external is easier to quickly test different changes to the files, but it's a little bit more limited. Some files will only load with the PC_External Loader TygerFramework plugin by Kana or the debug OpenAL dll (like mdl files), and some won't load at all in there (like ogv files). It is recommended to use the PC_External Loader plugin to not have the downsides of the debug OpenAL, which breaks bosses by not allowing you to enter the boss fights for the first time, even if you have enough thunder eggs. It also breaks the level select, and can sometimes glitch some textures. The PC_External Loader plugin also has more flexibility with putting files into folders in PC_External.</p>"},{"location":"Ty1/#pc_external","title":"PC_External","text":"<p>First thing to do for the PC_External method is to create a folder in the game folder and make sure to name the folder exactly like <code>\"PC_External\"</code>. Now just copy any modified files into that folder. They do not need to be in the same sub folders they were extracted to, just put them in the root of PC_External To use the PC_External Loader plugin, you can download it from here https://github.com/ElusiveFluffy/PC_External-Loader/releases and follow the install instructions. Or with Matt's mod manager https://github.com/xMcacutt/ty1_mod_manager To use the debug openAL, which can download it from here Debug OpenAL32.dll, just put it in the folder for the game replacing the one already there (recommend making a copy of the original one, just to easily be able to swap between them).</p> <p>If you didn't make a copy of the original OpenAL you can either verify the file integrity in steam or download it here Retail OpenAL32.dll.</p>"},{"location":"Ty1/#creating-a-patch_pc-rkv","title":"Creating a Patch_PC rkv","text":"<p>Creating a Patch_PC rkv is more recommended for a completed mod, just so you don't have to keep regenerating the rkv every time you make changes to any files.</p> <ul> <li>To create one make a folder with all the files you want to pack into the rkv (Make sure all the files aren't in any sub folders)</li> <li>Make a folder called \"Dummy\" next to it with nothing in it</li> <li>Launch rvkMT</li> <li>Inside rvkMT load the folder into the in slot <pre><code>load_dir \"C:/path/to/modified/files\" ../Dummy in\n</code></pre></li> <li>Next generate the rkv <pre><code>generate in\n</code></pre></li> <li>Then finally save the rkv to where you have Ty installed with <code>Patch_PC.rkv</code> after the path <pre><code>save in \"C:/path/to/ty/folder/Patch_PC.rkv\"\n</code></pre></li> </ul> <p>Now you can launch the game with no files in PC_External and it should load all your modified files from the Patch_PC.rkv with the retail OpenAL</p> <p>For more info about rvtMT you can look at the readme on the git repo for it https://github.com/tanoshiikoushi/rkvMT</p>"},{"location":"Ty1/EditingMDLs/","title":"Editing MDL Models","text":"<p>Animations</p> <p>The plugin currently only has basic support for importing/exporting <code>rigging</code> (uses empties instead of bones as that was simpler to implement) and <code>weights</code>. The plugin doesn't support <code>editing animations</code> though</p>"},{"location":"Ty1/EditingMDLs/#installation","title":"Installation","text":"<p>To edit the models you're gonna need blender and the MDL2 blender plugin created by Kana.</p> <p>Supported Blender Versions</p> <p>The Plugin Only Supports Blender Versions 3.0-4.4</p> <p>To get started:</p> <ul> <li>Download the most recent version from the releases tab https://github.com/ElusiveFluffy/MDL2-Blender-Plugin/releases</li> <li>Open blender and go to <code>Edit&gt;Preferences&gt;Add-ons</code>, and click on the install button at the top right</li> <li>Navigate to the zip file downloaded from the releases tab and select it</li> <li>Now just enable the plugin to have the MDL import and export options</li> </ul>"},{"location":"Ty1/EditingMDLs/#importing-models","title":"Importing Models","text":"<p>To import models just import then like any other model format in blender in the <code>file&gt;import&gt;MDL2</code> option.</p> <p>When importing models if there is a <code>\"DDS\" folder</code> in the same folder as the MDL file with the required .dds textures, the importer will automatically load in the textures and set up the textures in the materials for you.</p> <p>When importing the textures the plugin will automatically detect if it should be transparent. But sometimes the alpha check is incorrect and will result in models that should be opaque to be set as alpha blend.</p>"},{"location":"Ty1/EditingMDLs/#setting-the-texture","title":"Setting the Texture","text":"<p>When exporting the exporter uses the <code>material names</code> for the texture names in the mdl.</p> <p>Everything inside of the materials are NOT used when exporting, as the game mostly just supports diffuse textures and doesn't support the blender nodes, and to simplify exporting. </p> <p>If you're adding a texture to be used by the exported model all that is need is at least a empty material with its name the same as the texture's name (<code>excluding</code> the .dds part, which isn't needed in the name) or a name/alias of one in global.mad. </p> <p>Exporting</p> <p>The plugin will not export the dds textures with the model when exporting. Its expected that they're already in or modded into the game</p>"},{"location":"Ty1/EditingMDLs/#sub-objects","title":"Sub Objects","text":"<p>Sub objects are created based on collections in blender, all meshes in a collection will be grouped into a sub object.</p> <p>Merged Sub Object Meshes</p> <p>Since v1.3 the importer by default merges most of the meshes in each sub object together (it'll still keep the meshes in the right sub objects), for faster import times, and cleaner meshes in blender. This setting can be disabled in the import settings on the right side of the file selection window if needed.</p> <p>Some examples of what sub objects are used for, or to keep in mind:</p> <ul> <li>Some actors in game will hide/show certain sub objects in certain situations, like Ty's bite head model, or the motion sub objects for rangs, etc.</li> <li>Each fragment mesh uses a sub object, more details about fragment meshes below.</li> <li>There is a limit of <code>32 bones</code> per sub object. If you need more bones for a model then you'll need to split the mesh up into multiple sub objects.</li> <li>Each mesh in a sub object seems to have a vertex count limit of <code>16383 vertices</code>. If you encounter crashing when trying to load your MDL in game one issue could be the vertex count being too high, so try splitting up some high poly meshes into multiple sub objects</li> </ul>"},{"location":"Ty1/EditingMDLs/#adding-fragment-meshes","title":"Adding Fragment Meshes","text":"<p>To add a fragment mesh all you need to do is have the fragment collection/sub object name start with <code>F_</code> (eg. <code>F_FragName</code>). This will automatically export that sub object as a fragment.</p> <p>Keep in mind each individual fragment mesh will need to be in its own collection/sub object, if you want them to be separate, otherwise the fragment meshes in the same sub object will get grouped together into 1 fragment.</p>"},{"location":"Ty1/EditingMDLs/#setting-collision-properties","title":"Setting Collision Properties","text":"<p>Collisions are set through a custom collision panel, to easily select collision types (names taken from the comments in global.mad), with support for custom ones that you've added in the <code>global.mad</code> file.</p> <p>A couple things to note when setting a collision property</p> <ul> <li>If a collision property is set it will take priority over all of the texture names from the materials when exporting. Because of the way its set up with the collision panel each mesh can only have either texture names or a collision property.</li> <li>If a mesh has a collision property it will typically be rendered <code>invisible</code>. This can be changed in <code>global.mad</code> but not fully recommended.</li> </ul> <p>The collision panel is located in the <code>object data properties</code> tab  </p>"},{"location":"Ty1/EditingMDLs/#ref-points","title":"Ref Points","text":"<p><code>Ref points</code> can be for multiple different purposes depending on the model. Like with the flying platforms the ref points relate to where the particles should be emitted.</p> <p>If a model contains <code>ref points</code> they will be imported as empties in a ref points collection.</p> <p>Exporting</p> <p>Its recommended to have the same amount of ref points, with the same names, as the original model that you're editing/replacing.</p>"},{"location":"Ty1/LevelIDs/","title":"Level IDs","text":"Index Level ID Level Name 0 Z1 Rainbow Cliffs 1 Z2 E3 Demo [Broken .lv2] 2 Z3 Unused 3 Z4 Unused 4 A1 Two Up 5 A2 Walk in the Park 6 A3 Ship Rex 7 A4 Bull's Pen 8 B1 Bridge on the River Ty 9 B2 Snow Worries 10 B3 Outback Safari 11 B4 Kumu Caves [Unused, Missing .lv2] 12 C1 Lyre, Lyre Pants on Fire 13 C2 Beyond the Black Stump 14 C3 Rex Marks the Spot 15 C4 Fluffy's Fjord 16 D1 Final Cutscene/Credits 17 D2 Cass' Crest 18 D3 Neverwarm [Unused, Empty .lv2 of Bull's Pen] 19 D4 Crikey's Cove 20 E1 Cass' Pass 21 E2 Bonus World [Day] 22 E3 Bonus World [Night] 23 E4 Final Battle"},{"location":"Ty1/Exe_Variables/Collectables/","title":"Collectables","text":"<p>All known collectable related variables that are hardcoded in the exe. All offsets are for the newest version of Ty (version  1.44)</p>"},{"location":"Ty1/Exe_Variables/Collectables/#totals-screen","title":"Totals Screen","text":"Variable Variable Type Hex Offset Notes Opals int 0xE6A91 Rainbow Scales int 0xE6AB6 Value for the totals screen, make sure to edit the other one for Rainbow Cliffs too Talismans int 0xE6ACF Cogs int 0xE6AE8 Bilbies int 0xE6B01 Thunder Eggs int 0xE6B1A Frames int 0xE6B33"},{"location":"Ty1/Exe_Variables/Collectables/#totals-for-each-level","title":"Totals for Each Level","text":"Variable Variable Type Hex Offset Notes Level Total Opals int 0xE5277 Total amount for all levels RC Rainbow Scales int 0xE527C Value for Rainbow Cliffs, doesn't affect totals screen <p>Would be nice to have the max golden cogs value but unfortunately haven't found them yet</p>"},{"location":"Ty1/Exe_Variables/Collectables/#requirements","title":"Requirements","text":"Variable Variable Type Hex Offset Notes TE Machine Opal Requirement int 0x136904 Requirement for all levels"},{"location":"Ty1/Exe_Variables/Collectables/#picture-frames","title":"Picture Frames","text":"<p>Picture frames work quite differently from the other variables, their IDs get kept track of per level, and counted in a unique way.  They all get counted from the address assigned in the LEA(load effective address) up until the address ebp -20, except for the bonus levels which work a bit differently, they instead count up until address ebp -136.</p> <p>Increasing the amount of per level isn't fully possible but can be done with some trickery, decreasing the amount per level is much easier though, custom code or figuring out how to shuffle values around for each level without crashing would really help with being able to increase them</p> <p>To edit which picture frames are assigned to which level just edit the ID at the offset, its even possible to have 2 levels have the same ID.</p> <p>To <code>lower</code> the amount per level just go to the LEA offset and change the value to a lower variable pointer address, eg. if you wanted to change Rainbow cliffs to have 7 picture frames instead of 9 you would change the LEA from -52, to -44. Also keep in mind which variables will be cut off from lowering the amount and reassign the IDs as needed.</p> <p><code>Increasing</code> the amount of IDs is a bit more complex and quite limited, it requires setting a level that is assigned IDs before another level (all the levels below are ordered) to have the same amount or less than the usual amount the next level would have. eg. setting Rainbow cliffs LEA to -44 you can then set Two ups LEA up to -52 and use IDs at address -52 and -48 where Rainbow cliffs sets them for Two up as they have already been assigned a value and are no longer being used for Rainbow cliffs.  This will then make Rainbow cliffs have 7 IDs and Two up have either 8 or 9.</p> <p>But for something like Lyre Lyre which only has 5 and the level before it, snow worries, has 24, you would need to lower snow worries down to at least 5 IDs to then be able to add new unique IDs to Lyre to not have any overlap between the two levels</p> <p>You could even go across multiple levels to increase the amount of ID, eg. could set Rainbow Cliffs and Two up to 6 frames, to then be able to increase the amount in Walk in the Park up to 9, just keep in mind you would need to set the ID at -44 with Two Ups addresses</p> <p>To <code>disable</code> picture frames showing on the totals screen for a level just change the LEA to -16 (F0).</p> <p>Below is offsets for each picture frame ID (all IDs are ints), the levels they are assigned to by default, and the pointer address for the local variable the IDs are located by default (reference for editing the LEA opcode)</p>"},{"location":"Ty1/Exe_Variables/Collectables/#rainbow-cliffs-z1","title":"Rainbow Cliffs (Z1)","text":"<p>Total frames: 9</p> <p>LEA Value Offset: 0x210E</p> ID Hex Offset Variable Pointer Address 0 0x2107 ebp -52 1 0x2112 ebp -48 2 0x211f ebp -44 3 0x2126 ebp -40 4 0x212d ebp -36 5 0x2134 ebp -32 6 0x213b ebp -28 7 0x2142 ebp -24 8 0x2149 ebp -20"},{"location":"Ty1/Exe_Variables/Collectables/#two-up-a1","title":"Two Up (A1)","text":"<p>Total frames: 7</p> <p>LEA Value Offset: 0x21D7</p> ID Hex Offset Variable Pointer Address 9 0x21d0 ebp -44 10 0x21db ebp -40 11 0x21e3 ebp -36 12 0x21ea ebp -32 13 0x21f1 ebp -28 14 0x21f8 ebp -24 15 0x21ff ebp -20"},{"location":"Ty1/Exe_Variables/Collectables/#walk-in-the-park-a2","title":"Walk in the Park (A2)","text":"<p>Total frames: 6</p> <p>LEA Value Offset: 0x2242</p> ID Hex Offset Variable Pointer Address 16 0x223b ebp -40 17 0x2246 ebp -36 18 0x224e ebp -32 19 0x2255 ebp -28 20 0x225c ebp -24 21 0x2263 ebp -20"},{"location":"Ty1/Exe_Variables/Collectables/#ship-rex-a3","title":"Ship Rex (A3)","text":"<p>Total frames: 9</p> <p>LEA Value Offset: 0x22F7</p> ID Hex Offset Variable Pointer Address 22 0x2291 ebp -52 23 0x2298 ebp -48 24 0x229f ebp -44 25 0x22a6 ebp -40 26 0x22ad ebp -36 27 0x22b4 ebp -32 28 0x22bb ebp -28 29 0x22c2 ebp -24 30 0x22c9 ebp -20"},{"location":"Ty1/Exe_Variables/Collectables/#bridge-on-the-river-ty-b1","title":"Bridge on the River Ty (B1)","text":"<p>Total frames: 20</p> <p>LEA Value Offset: 0x2341</p> ID Hex Offset Variable Pointer Address 31 0x233a ebp -96 32 0x2345 ebp -92 33 0x234d ebp -88 34 0x2354 ebp -84 35 0x235b ebp -80 36 0x2362 ebp -76 37 0x2369 ebp -72 38 0x2370 ebp -68 39 0x2377 ebp -64 40 0x237e ebp -60 41 0x2385 ebp -56 42 0x238c ebp -52 43 0x2393 ebp -48 44 0x239a ebp -44 45 0x23a1 ebp -40 46 0x23a8 ebp -36 47 0x23af ebp -32 48 0x23b6 ebp -28 49 0x23bd ebp -24 50 0x23c4 ebp -20"},{"location":"Ty1/Exe_Variables/Collectables/#snow-worries-b2","title":"Snow Worries (B2)","text":"<p>Total frames: 24</p> <p>LEA Value Offset: 0x2407</p> ID Hex Offset Variable Pointer Address 51 0x2400 ebp -112 52 0x240b ebp -108 53 0x2413 ebp -104 54 0x241a ebp -100 55 0x2421 ebp -96 56 0x2428 ebp -92 57 0x242f ebp -88 58 0x2436 ebp -84 59 0x243d ebp -80 60 0x2444 ebp -76 61 0x244b ebp -72 62 0x2452 ebp -68 63 0x2459 ebp -64 64 0x2460 ebp -60 65 0x2467 ebp -56 66 0x246e ebp -52 67 0x2475 ebp -48 68 0x247c ebp -44 69 0x2483 ebp -40 70 0x248a ebp -36 71 0x2491 ebp -32 72 0x2498 ebp -28 73 0x249f ebp -24 74 0x24a6 ebp -20"},{"location":"Ty1/Exe_Variables/Collectables/#lyre-lyre-pants-on-fire-c1","title":"Lyre, Lyre Pants on Fire (C1)","text":"<p>Total frames: 5</p> <p>LEA Value Offset: 0x252D</p> ID Hex Offset Variable Pointer Address 75 0x2526 ebp -36 76 0x2531 ebp -32 77 0x2539 ebp -28 78 0x2540 ebp -24 79 0x2547 ebp -20"},{"location":"Ty1/Exe_Variables/Collectables/#beyond-the-black-stump-c2","title":"Beyond the Black Stump (C2)","text":"<p>Total frames: 29</p> <p>First variable ebp -132 uses a int for the address as its too big for a signed byte</p> <p>LEA Value Offset: 0x258D</p> ID Hex Offset Variable Pointer Address 80 0x2586 ebp -132 81 0x2594 ebp -128 82 0x259c ebp -124 83 0x25a3 ebp -120 84 0x25aa ebp -116 85 0x25b1 ebp -112 86 0x25b8 ebp -108 87 0x25bf ebp -104 88 0x25c6 ebp -100 89 0x25cd ebp -96 90 0x25d4 ebp -92 91 0x25db ebp -88 92 0x25e2 ebp -84 93 0x25e9 ebp -80 94 0x25f0 ebp -76 95 0x25f7 ebp -72 96 0x25fe ebp -68 97 0x2605 ebp -64 98 0x260c ebp -60 99 0x2613 ebp -56 100 0x261a ebp -52 101 0x2621 ebp -48 102 0x2628 ebp -44 103 0x262f ebp -40 104 0x2636 ebp -36 105 0x263d ebp -32 106 0x2644 ebp -28 107 0x264b ebp -24 108 0x2652 ebp -20"},{"location":"Ty1/Exe_Variables/Collectables/#rex-marks-the-spot-c3","title":"Rex Marks the Spot (C3)","text":"<p>Total frames: 18</p> <p>LEA Value Offset: 0x26DD</p> ID Hex Offset Variable Pointer Address 109 0x2680 ebp -88 110 0x2687 ebp -84 111 0x268e ebp -80 112 0x2695 ebp -76 113 0x269c ebp -72 114 0x26a3 ebp -68 115 0x26aa ebp -64 116 0x26b1 ebp -60 117 0x26b8 ebp -56 118 0x26bf ebp -52 119 0x26c6 ebp -48 120 0x26d6 ebp -44 121 0x26e1 ebp -40 122 0x26ee ebp -36 123 0x26f5 ebp -32 124 0x26fc ebp -28 125 0x2703 ebp -24 126 0x270a ebp -20"},{"location":"Ty1/Exe_Variables/Collectables/#bonus-world-day-e2","title":"Bonus World [Day] (E2)","text":"<p>Total frames: 123</p> <p>The bonus worlds work a bit different and end on a different offset and use ints for the memory addresses</p> <p>LEA Value Offset: 0x2C84</p> ID Hex Offset Variable Pointer Address 127 0x2807 ebp -624 128 0x2811 ebp -620 129 0x281b ebp -616 130 0x2825 ebp -612 131 0x282f ebp -608 132 0x2839 ebp -604 133 0x2843 ebp -600 134 0x284d ebp -596 135 0x2857 ebp -592 136 0x2861 ebp -588 137 0x286b ebp -584 138 0x2875 ebp -580 139 0x287f ebp -576 140 0x2889 ebp -572 141 0x2893 ebp -568 142 0x289d ebp -564 143 0x28a7 ebp -560 144 0x28b1 ebp -556 145 0x28bb ebp -552 146 0x28c5 ebp -548 147 0x28cf ebp -544 148 0x28d9 ebp -540 149 0x28e3 ebp -536 150 0x28ed ebp -532 151 0x28f7 ebp -528 152 0x2901 ebp -524 153 0x290b ebp -520 154 0x2915 ebp -516 155 0x291f ebp -512 156 0x2929 ebp -508 157 0x2933 ebp -504 158 0x293d ebp -500 159 0x2947 ebp -496 160 0x2951 ebp -492 161 0x295b ebp -488 162 0x2965 ebp -484 163 0x296f ebp -480 164 0x2979 ebp -476 165 0x2983 ebp -472 166 0x298d ebp -468 167 0x2997 ebp -464 168 0x29a1 ebp -460 169 0x29ab ebp -456 170 0x29b5 ebp -452 171 0x29bf ebp -448 172 0x29c9 ebp -444 173 0x29d3 ebp -440 174 0x29dd ebp -436 175 0x29e7 ebp -432 176 0x29f1 ebp -428 177 0x29fb ebp -424 178 0x2a05 ebp -420 179 0x2a0f ebp -416 180 0x2a19 ebp -412 181 0x2a23 ebp -408 182 0x2a2d ebp -404 183 0x2a37 ebp -400 184 0x2a41 ebp -396 185 0x2a4b ebp -392 186 0x2a55 ebp -388 187 0x2a5f ebp -384 188 0x2a69 ebp -380 189 0x2a73 ebp -376 190 0x2a7d ebp -372 191 0x2a87 ebp -368 192 0x2a91 ebp -364 193 0x2a9b ebp -360 194 0x2aa5 ebp -356 195 0x2aaf ebp -352 196 0x2ab9 ebp -348 197 0x2ac3 ebp -344 198 0x2acd ebp -340 199 0x2ad7 ebp -336 200 0x2ae1 ebp -332 201 0x2aeb ebp -328 202 0x2af5 ebp -324 203 0x2aff ebp -320 204 0x2b09 ebp -316 205 0x2b13 ebp -312 206 0x2b1d ebp -308 207 0x2b27 ebp -304 208 0x2b31 ebp -300 209 0x2b3b ebp -296 210 0x2b45 ebp -292 211 0x2b4f ebp -288 212 0x2b59 ebp -284 213 0x2b63 ebp -280 214 0x2b6d ebp -276 215 0x2b77 ebp -272 216 0x2b81 ebp -268 217 0x2b8b ebp -264 218 0x2b95 ebp -260 219 0x2b9f ebp -256 220 0x2ba9 ebp -252 221 0x2bb3 ebp -248 222 0x2bbd ebp -244 223 0x2bc7 ebp -240 224 0x2bd1 ebp -236 225 0x2bdb ebp -232 226 0x2be5 ebp -228 227 0x2bef ebp -224 228 0x2bf9 ebp -220 229 0x2c03 ebp -216 230 0x2c0d ebp -212 231 0x2c17 ebp -208 232 0x2c21 ebp -204 233 0x2c2b ebp -200 234 0x2c35 ebp -196 235 0x2c3f ebp -192 236 0x2c49 ebp -188 237 0x2c53 ebp -184 238 0x2c5d ebp -180 239 0x2c67 ebp -176 240 0x2c7d ebp -172 241 0x2c8e ebp -168 242 0x2c9e ebp -164 243 0x2ca8 ebp -160 244 0x2cb2 ebp -156 245 0x2cbc ebp -152 246 0x2cc6 ebp -148 247 0x2cd0 ebp -144 248 0x2cda ebp -140 249 0x2ce4 ebp -136"},{"location":"Ty1/Exe_Variables/Collectables/#bonus-world-night-e3","title":"Bonus World [Night] (E3)","text":"<p>Total frames: 123</p> <p>LEA Value Offset: 0x2F76</p> ID Hex Offset Variable Pointer Address 250 0x2d15 ebp -624 251 0x2d1f ebp -620 252 0x2d29 ebp -616 253 0x2d33 ebp -612 254 0x2d3d ebp -608 255 0x2d47 ebp -604 256 0x2d51 ebp -600 257 0x2d5b ebp -596 258 0x2d65 ebp -592 259 0x2d6f ebp -588 260 0x2d79 ebp -584 261 0x2d83 ebp -580 262 0x2d8d ebp -576 263 0x2d97 ebp -572 264 0x2da1 ebp -568 265 0x2dab ebp -564 266 0x2db5 ebp -560 267 0x2dbf ebp -556 268 0x2dc9 ebp -552 269 0x2dd3 ebp -548 270 0x2ddd ebp -544 271 0x2de7 ebp -540 272 0x2df1 ebp -536 273 0x2dfb ebp -532 274 0x2e05 ebp -528 275 0x2e0f ebp -524 276 0x2e19 ebp -520 277 0x2e23 ebp -516 278 0x2e2d ebp -512 279 0x2e37 ebp -508 280 0x2e41 ebp -504 281 0x2e4b ebp -500 282 0x2e55 ebp -496 283 0x2e5f ebp -492 284 0x2e69 ebp -488 285 0x2e73 ebp -484 286 0x2e7d ebp -480 287 0x2e87 ebp -476 288 0x2e91 ebp -472 289 0x2e9b ebp -468 290 0x2ea5 ebp -464 291 0x2eaf ebp -460 292 0x2eb9 ebp -456 293 0x2ec3 ebp -452 294 0x2ecd ebp -448 295 0x2ed7 ebp -444 296 0x2ee1 ebp -440 297 0x2eeb ebp -436 298 0x2ef5 ebp -432 299 0x2eff ebp -428 300 0x2f09 ebp -424 301 0x2f13 ebp -420 302 0x2f1d ebp -416 303 0x2f27 ebp -412 304 0x2f31 ebp -408 305 0x2f3b ebp -404 306 0x2f45 ebp -400 307 0x2f4f ebp -396 308 0x2f59 ebp -392 309 0x2f6f ebp -388 310 0x2f80 ebp -384 311 0x2f90 ebp -380 312 0x2f9a ebp -376 313 0x2fa4 ebp -372 314 0x2fae ebp -368 315 0x2fb8 ebp -364 316 0x2fc2 ebp -360 317 0x2fcc ebp -356 318 0x2fd6 ebp -352 319 0x2fe0 ebp -348 320 0x2fea ebp -344 321 0x2ff4 ebp -340 322 0x2ffe ebp -336 323 0x3008 ebp -332 324 0x3012 ebp -328 325 0x301c ebp -324 326 0x3026 ebp -320 327 0x3030 ebp -316 328 0x303a ebp -312 329 0x3044 ebp -308 330 0x304e ebp -304 331 0x3058 ebp -300 332 0x3062 ebp -296 333 0x306c ebp -292 334 0x3076 ebp -288 335 0x3080 ebp -284 336 0x308a ebp -280 337 0x3094 ebp -276 338 0x309e ebp -272 339 0x30a8 ebp -268 340 0x30b2 ebp -264 341 0x30bc ebp -260 342 0x30c6 ebp -256 343 0x30d0 ebp -252 344 0x30da ebp -248 345 0x30e4 ebp -244 346 0x30ee ebp -240 347 0x30f8 ebp -236 348 0x3102 ebp -232 349 0x310c ebp -228 350 0x3116 ebp -224 351 0x3120 ebp -220 352 0x312a ebp -216 353 0x3134 ebp -212 354 0x313e ebp -208 355 0x3148 ebp -204 356 0x3152 ebp -200 357 0x315c ebp -196 358 0x3166 ebp -192 359 0x3170 ebp -188 360 0x317a ebp -184 361 0x3184 ebp -180 362 0x318e ebp -176 363 0x3198 ebp -172 364 0x31a2 ebp -168 365 0x31ac ebp -164 366 0x31b6 ebp -160 367 0x31c0 ebp -156 368 0x31ca ebp -152 369 0x31d4 ebp -148 370 0x31de ebp -144 371 0x31e8 ebp -140 372 0x31f2 ebp -136"},{"location":"Ty1/Exe_Variables/Gameplay/","title":"Gameplay","text":"<p>All known gameplay related variables that are hardcoded in the exe. All offsets are for the newest version of Ty (version  1.44)</p>"},{"location":"Ty1/Exe_Variables/Gameplay/#charge-bite-requirement","title":"Charge Bite Requirement","text":"<p>Charge bites work by having a separate hidden value that counts up for every opal that you collect, when trying to charge bite it checks if the requirement is less than the amount on the hidden counter.  After using a charge bite the hidden counter then gets minused by a set amount </p> <p>The charge bite is a bit limited with how you can edit it because of it using a SAR ((bit)Shift Arithmetically Right) for dividing,  assuming the compiler for the game chose that as it's probably more optimised than using a divide opcode but its more limited with how many possible values it can divide by.</p> <p>The only possible values with the SAR are:</p> SAR Amount of Bits to Shift Opal Requirement for Charge Bite 0 3.125 1 6.25 2 12.5 3 25 4 50 5 100 <p>Unfortunately SAR 6 isn't possible as it gives a value of 200 and the amount to minus and charge bite requirement values are both signed bytes which can only go up to 127.</p> <p>Values below 3 aren't really useful as they're not a whole number. Eg. if you used a SAR value of 2 the first charge bite shown on the UI would be at 13, as the requirement for charge bites needs to be less than the hidden counter,  the second one would be 12 (total of 25 on the hidden counter), then the next would be 13 (total of 38), next would be 12 (total of 50), etc. The inconsistent amount would make the charge bite requirement and minusing value not match up since its a whole number</p> <p>The offsets for all the charge bite values are listed below</p> Variable Variable Type Hex Offset Notes Amount to Minus After Using Charge Bite byte 0x2829D The amount that gets minused from the hidden counter for the charge bite Charge Bite Requirement byte 0x29847 If you have more than or equal to this amount on the hidden counter the game will let you charge bite Charge Bite UI Opal Glow byte (SAR) 0xFB632 The SAR operation that checks if you have enough on the hidden counter to show the brighter glow around the opal Display Charge Bite Amount byte (SAR) 0xFB82E Same as the glow one but shows the number for how many charge bites you have (See the value below to edit the count in the UI) Max Charge Bites Displayed int 0xFC8A8 By default this is 9, just documenting this even though couldn't ever really edit the requirement to make it have more than 9 Charge Bite Count byte (SAR) 0xFC8AE This is the SAR that will count the charge bites for the count on the UI <p>Last Value for the charge bite is related to the -tydev and -eadev launch options, these will set the amount of charge bites you have with them</p> Variable Variable Type Hex Offset -tydev Charge Bite Amount int 0x10C62C -eadev Charge Bite Amount int 0x10C657"},{"location":"Ty1/Exe_Variables/Gameplay/#level-variables","title":"Level Variables","text":"Variable Variable Type Hex Offset Notes Aurora's Kids Total Count int 0xD3947 Just the amount for the UI, the amount for the actual objective is counted from the amount of kids present in the lv2"},{"location":"Ty1/Exe_Variables/Gameplay/#boomerangs","title":"Boomerangs","text":"<p>Most of the values for boomerangs are in the global.model file</p> Variable Variable Type Hex Offset Notes Doomerang Duration float 0x1F95AC"},{"location":"Ty2/","title":"Getting Started","text":"<p>Add Ty 2 getting started documentation</p>"},{"location":"Ty2/LevelIDs/","title":"Level IDs","text":""},{"location":"Ty2/LevelIDs/#levels","title":"Levels","text":"Level ID Level Name Z2 Burramudgee Town Z3 Currawong Z4 Southern Rivers A1 Outback Oasis A2 The Never Never A3 The Wetlands A4 Steel Springs A5 Fair Dinkum B3 Sulfur Rocks B4 Fluffy's Fortress C4 Buster the Nanobot Boss D1 Cass's Run D4 Final Battle"},{"location":"Ty2/LevelIDs/#races","title":"Races","text":"Race ID Race Name R1 Refinery Run R2 Lava Falls R3 Hearty Beach Race R4 Parrotbeard Cove R6 Never Never Road R7 Outback Dash R9 Turbo Track"},{"location":"Ty2/LevelIDs/#missions","title":"Missions","text":"Mission ID Mission Name M2 Lake Burramudgee M12 Frill Neck Forest M13 Muddy Bottom M14 Greenwood Forest M28 Old Stony Creek M33 Tea Tree Lake M37 Mount Boom M38 Gunna Gunna M42 Sea Lab M52 Wulli Wulli Oil Rig M64 Wobbygon Bay M67 Training Grounds 1 M68 Training\u00a0Grounds\u00a02"},{"location":"Ty2/LevelIDs/#test-levels","title":"Test Levels","text":"Level ID Level Name Q1 Testing Q2 . Q3 Ocean Girl"},{"location":"TygerFramework/","title":"Getting Started","text":"<p>Note</p> <p>This guide will go over how to make a plugin using a <code>C++ visual studio project</code>, but you could also use cmake, but you'll need to do things a bit differently, which won't be covered here.</p> <p>Version</p> <p>Everything in this wiki is based on <code>v1.0.0</code> of TygerFramework, unless specified otherwise</p>"},{"location":"TygerFramework/#adding-the-api","title":"Adding the API","text":"<p>Before Starting</p> <p>Before starting make sure to set your DLL to build as a <code>32 bit(x86)</code> DLL, otherwise the game will just <code>fail to load it</code></p> <p>First you'll need to set your C++ version to <code>C++17</code> as thats the version the API needs. To set it just right click on the <code>project</code> then <code>Properties&gt;General&gt;C++ Language Standard</code>. Click on it and a arrow to the right will appear and clicking on that will have a dropdown of all the available versions. Just set it to <code>atleast C++17 or newer</code>.</p> <p>To include the API for the plugin just download the <code>API for Developing Plugins zip</code> from the releases tab: https://github.com/ElusiveFluffy/TygerFramework/releases. <p>Then just copy the <code>TygerFrameworkAPI.h</code> and <code>TygerFrameworkAPI.hpp</code> files into the project folder, then in visual studio add them as a existing item. If you <code>don't copy</code> them to the project folder it'll just reference the original location for the file. Which can cause <code>issues or make it more difficult when trying to include it</code>.</p> <p>Now just add <code>#include \"TygerFrameworkAPI.hpp\"</code> to any classes that you want to use the API with.</p> <p>Use the .hpp</p> <p>Make sure to <code>#include</code> the <code>.hpp</code> file and <code>not</code> the <code>.h</code> file</p>"},{"location":"TygerFramework/#initializing-the-api","title":"Initializing the API","text":"<p>Now that the API is included you need to <code>initialize</code> the API. A nice place to do this is in <code>dllmain.cpp</code>, so add the <code>API hpp</code> file to dllmain.</p> <p>To initialize the API create a export function either like <pre><code>EXTERN_C bool TygerFrameworkPluginInitialize(TygerFrameworkPluginInitializeParam* param) {\n    //Make sure to call this first before any API Functions\n    API::Initialize(param);\n}\n</code></pre> or <pre><code>extern \"C\" __declspec(dllexport) bool TygerFrameworkPluginInitialize(TygerFrameworkPluginInitializeParam* param) {\n    //Make sure to call this first before any API Functions\n    API::Initialize(param);\n}\n</code></pre> From this function you need to return a bool. <code>return true</code> if your plugin <code>successfully</code> initialized, or <code>false</code> if your plugin <code>failed</code> to initialize some code you needed. Returning false will make TygerFramework <code>unload</code> your plugin.</p> <p>Try not to take <code>too long</code> to initialize your plugin as it'll hold up other plugins from initializing, if your plugin needs to take a <code>while to initialize</code> its recommended to make a new thread for the initialization. Only <code>downside</code> to doing this would be you can't return a error to have your plugin unloaded if something goes wrong.</p>"},{"location":"TygerFramework/#error-message","title":"Error Message","text":"<p>If you <code>return false</code>, you can also set a <code>error message</code> to give more info about what went wrong. It will also show the error in the plugin collapsed header in the TygerFramework window.</p> <p>No need to also log the error, as TygerFramework will do that for you with the error message you provide.</p> <p>To set the error message you just need to set the <code>initErrorMessage</code> variable in the <code>param</code> like this: <pre><code>if (ErrorCondition) {\n    param-&gt;initErrorMessage = \"Write what went wrong here\";\n    return false;\n}\n</code></pre></p>"},{"location":"TygerFramework/#plugin-minimum-version-requirement","title":"Plugin Minimum Version Requirement","text":"<p>Its recommend to add the minimum version requirement function so your plugin <code>won't be loaded with a older version</code> of TygerFramework, and crash the game if it tries using API functions that aren't in the older version.</p> <p>The API files <code>include</code> definitions for which version it is intended for, so you can easily specify which version the plugin needs.</p> <p>To add the function you can add it either like this <pre><code>EXTERN_C void TygerFrameworkPluginRequiredVersion(TygerFrameworkPluginVersion* version) {\n    //Use the version number defined in the API\n    version-&gt;Major = TygerFrameworkPluginVersion_Major;\n    version-&gt;Minor = TygerFrameworkPluginVersion_Minor;\n    version-&gt;Patch = TygerFrameworkPluginVersion_Patch;\n\n    //Optional if you only want the plugin to run for a specific game \n    //(List all the game numbers the plugin is compatible with (1 = Ty 1, 2 = Ty 2, 3 = Ty 3). \n    //If you don't include this line it'll support any game)\n    version-&gt;CompatibleGames = {1};\n}\n</code></pre> or <pre><code>extern \"C\" __declspec(dllexport) void TygerFrameworkPluginRequiredVersion(TygerFrameworkPluginVersion* version) {\n    //Specifiy the version number defined in the API\n    version-&gt;Major = TygerFrameworkPluginVersion_Major;\n    version-&gt;Minor = TygerFrameworkPluginVersion_Minor;\n    version-&gt;Patch = TygerFrameworkPluginVersion_Patch;\n\n    //Optional if you only want the plugin to run for a specific game \n    //(List all the game numbers the plugin is compatible with (1 = Ty 1, 2 = Ty 2, 3 = Ty 3). \n    //If you don't include this line it'll support any game)\n    version-&gt;CompatibleGames = {1};\n}\n</code></pre></p> <p>The compatible games line is <code>only required</code> if you want your plugin to only load for a certain game.</p> <p>Load Order</p> <p>The minimum version function gets checked <code>before</code> the plugin gets initialized with the <code>TygerFrameworkPluginInitialize</code> function</p>"},{"location":"TygerFramework/#adding-the-export-functions","title":"Adding the Export Functions","text":"<p>If you're using a C++ project file make sure to also add a <code>Source.def</code> file. To create one with the add new file menu go to the <code>code section</code> then <code>Module-Definition File</code>. To make sure it auto linked right click on the <code>project</code> then <code>Properties&gt;Linker&gt;Input</code> and the <code>Source.def</code> file should be in the module definition file section, if not just add it in there.</p> <p>Next you need to specify the export functions in your <code>Source.def</code> file, open it and add your plugin name next to <code>LIBRARY</code> and add the <code>EXPORTS</code> you're using <pre><code>LIBRARY \"Example Plugin\"\n\nEXPORTS\nTygerFrameworkPluginInitialize\nTygerFrameworkPluginRequiredVersion\n</code></pre> Of course replacing <code>\"Example Plugin\"</code> with your own project name, the quotation marks are only needed if your project name has a space in it.</p> <p>Building</p> <p>Now you should be able to build the project and TygerFramework should be able to initialize your plugin with the API, and check the minimum required version</p>"},{"location":"TygerFramework/#post-build-command","title":"Post Build Command","text":"<p>I <code>highly recommend</code> adding a post build command to auto copy the built dll to the plugin folder, as it makes it <code>alot more convenient</code> to test the plugin without having to copy the dll to the plugin folder every time you recompile it.</p> <p>To add one just right click on the project file then <code>properties&gt;Build Events&gt;Post-Build Event</code>, in the command line section add this command: <pre><code>copy \"$(OutDir)$(ProjectName).dll\" \"C:\\Program Files (x86)\\Steam\\steamapps\\common\\TY the Tasmanian Tiger\\Plugins\\$(ProjectName).dll\"\n</code></pre> Of course <code>changing the path to the game</code> to where you have Ty 1, 2, or 3 installed.</p>"},{"location":"TygerFramework/#debugging-your-plugin","title":"Debugging Your Plugin","text":"<p>To <code>debug</code> your plugin with <code>breakpoints</code> you just need to set <code>2</code> things in the properties of the project. Just right click on the <code>project</code> then <code>Properties&gt;Debugging</code></p> <p>Inside the Debugging section you need to set the <code>Command</code> to the Ty exe. If you click in the text box a arrow will appear on the right side, clicking on that you can then <code>choose browse</code> to be able to just browse to the exe.</p> <p>You next need to set the <code>Working Directory</code> to the <code>folder</code> the Ty exe is in, otherwise the game will look for the RKVs in the <code>wrong folder</code> and just <code>crash</code> because they aren't there. You can also do the same <code>browse</code> thing as you did with the <code>Command section</code>.</p> <p>Now that you have the Debugging settings all set up you can just press the <code>play button</code> (Will say <code>Local Windows Debugger</code>) in visual studio and it will launch the game and <code>trigger any breakpoints</code> you have set in the code for the plugin.</p> <p>Launch Options</p> <p>You can also add any launch options you want, (like -tydev), in the <code>Debugging</code> settings in the <code>Command Arguments</code> section</p>"},{"location":"TygerFramework/#dllmain","title":"DllMain","text":"<p>Optionally, you can use <code>DllMain for startup</code>, with <code>DLL_PROCESS_ATTACH</code>, if your plugin absolutely needs to load <code>immediately</code>, or you don't want the TygerFramework API.</p> <p>DllMain will get loaded earlier than the <code>TygerFramework Plugin Initialize</code> export function, and will <code>hold up the game</code> unless you make another thread.</p>"},{"location":"TygerFramework/#example-plugin","title":"Example Plugin","text":"<p>If you prefer going through a already made plugin, or need to see how it works in a actual project, I've created a example plugin of how you would go about using the API. https://github.com/ElusiveFluffy/Example-Plugin.</p> <p>A version for each TygerFramework release can be found in the releases tab, which includes the source code and a built DLL of the example plugin.</p>"},{"location":"TygerFramework/API/EventListeners/","title":"Event Listeners","text":"<p>For more specific examples on how to use the functions you can look through the Example Plugin</p> <p>When putting the function into the API subscriber functions don't add the brackets <code>()</code>. Eg. for the AddDrawPluginUI one you would just run it like <code>API::AddDrawPluginUI(DrawUI);</code>.</p>"},{"location":"TygerFramework/API/EventListeners/#adddrawpluginui","title":"AddDrawPluginUI","text":"Syntax  <pre><code>API::AddDrawPluginUI(func);\n</code></pre>  Parameters  <p><code>func</code></p> <p>The function you want to be ran <code>every frame</code> that the TygerFramework menu is <code>open</code>.</p> Input function just needs to be void:<pre><code>void DrawUI()\n</code></pre>  Return Value  <p><code>bool</code></p> <p>If the input function is successfully subscribed to the <code>draw plugin UI event</code> it'll return <code>true</code>.</p>"},{"location":"TygerFramework/API/EventListeners/#addpluginimguiwantcapturemouse","title":"AddPluginImGuiWantCaptureMouse","text":"<p>Required for <code>fixing the resize cursor</code> on plugin windows, and to <code>stop</code> the game from registering inputs while the window is focused</p>  Syntax  v1.0.1v1.0.0 <pre><code>//Make sure to cast this, otherwise TygerFramework won't get the return value\nAPI::AddPluginImGuiWantCaptureMouse((ImGuiWantCaptureMouseFunc)func);\n</code></pre> <pre><code>//Make sure to cast this, otherwise TygerFramework won't get the return value\nAPI::AddPluginImGuiHasFocus((ImGuiHasFocusFunc)func);\n</code></pre>  Parameters  <p><code>func</code></p> <p>The function you want to be used to check if your plugin's ImGui context has any windows that want mouse capture.</p> <p>All your event function needs to contain:<pre><code>//To block clicks from the game when the window is focused\nbool GUI::ImGuiWantCaptureMouse() {\n    //WantCaptureMouse works better than window focus\n    return ImGui::GetIO().WantCaptureMouse;\n}\n</code></pre> <code>return:</code> Just return your plugin's ImGui WantCaptureMouse state.</p>  Return Value  <p><code>bool</code></p> <p>If the input function is successfully subscribed to the <code>ImGui want capture mouse event</code> it'll return <code>true</code>.</p>"},{"location":"TygerFramework/API/EventListeners/#addpluginwndproc","title":"AddPluginWndProc","text":"<p>Required for <code>interacting</code> with your ImGui window. Also used to block any WndProc events from the game by returning <code>true</code>.</p>  Syntax  <pre><code>//Make sure to cast this, otherwise TygerFramework won't get the return value\nAPI::AddPluginWndProc((WndProcFunc)func);\n</code></pre>  Parameters  <p><code>func</code></p> <p>The function you want any WndProc events to be sent to.</p> Minimal amount that you may typically need for your plugin:<pre><code>//WndProc to be able to interact with imgui or block any WndProc from interacting with the Ty window\nextern LRESULT ImGui_ImplWin32_WndProcHandler(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam);\nbool WndProc(HWND hWnd, UINT msg, WPARAM wParam, LPARAM lParam) {\n    if (API::DrawingGUI())\n        if (ImGui_ImplWin32_WndProcHandler(hWnd, msg, wParam, lParam))\n            return true;\n    return false;\n}\n</code></pre>  Return Value  <p><code>bool</code></p> <p>If the input function is successfully subscribed to the <code>WndProc event</code> it'll return <code>true</code>.</p>"},{"location":"TygerFramework/API/EventListeners/#addtickbeforegame","title":"AddTickBeforeGame","text":"<p>Tick event that runs every frame <code>before</code> the game runs its own logic.</p>  Syntax  <pre><code>API::AddTickBeforeGame(func);\n</code></pre>  Parameters  <p><code>func</code></p> <p>The function you want to be ran <code>every frame before</code> the game's logic.</p> Input function just needs to be void and have a float input:<pre><code>void TickBeforeGame(float deltaSeconds)\n</code></pre> <p> <code>deltaSeconds</code></p> <p>\u2003\u2003The amount of seconds the last frame took to render.</p>  Return Value  <p><code>bool</code></p> <p>If the input function is successfully subscribed to the <code>tick before game event</code> it'll return <code>true</code>.</p>"},{"location":"TygerFramework/API/EventListeners/#addontyinitialized","title":"AddOnTyInitialized","text":"<p>Only in v1.1.0 or newer \u2193</p> <p>Event that fires once Ty has finished it's initialization step</p>  Syntax  <pre><code>API::AddOnTyInitialized(func);\n</code></pre>  Parameters  <p><code>func</code></p> <p>The function you want to be ran once the game is initialized.</p> Input function just needs to be void:<pre><code>void OnTyInitialized()\n</code></pre>  Return Value  <p><code>bool</code></p> <p>If the input function is successfully subscribed to the <code>on Ty initialized event</code> it'll return <code>true</code>.</p>"},{"location":"TygerFramework/API/EventListeners/#addontybeginshutdown","title":"AddOnTyBeginShutdown","text":"<p>Only in v1.1.0 or newer \u2193</p> <p>Event that fires when Ty starts shutting down, before it has a chance to deinitialize anything. Useful for if you need to deinitialize something before Ty shuts down to avoid a crash/error</p> <p>Recommended only to have shutdown logic that would cause a crash with the game on this event, instead of general shutdown logic for your plugin. As this in some cases won't run (usually when Ty is closed through the close button on the window)</p>  Syntax  <pre><code>API::AddOnTyBeginShutdown(func);\n</code></pre>  Parameters  <p><code>func</code></p> <p>The function you want to be ran when Ty begins shutting down.</p> Input function just needs to be void:<pre><code>void OnTyBeginShutdown()\n</code></pre>  Return Value  <p><code>bool</code></p> <p>If the input function is successfully subscribed to the <code>on Ty begin shutdown event</code> it'll return <code>true</code>.</p>"},{"location":"TygerFramework/API/GeneralAPI/","title":"General API","text":"<p>For more specific examples on how to use the functions you can look through the Example Plugin</p>"},{"location":"TygerFramework/API/GeneralAPI/#functions","title":"Functions:","text":""},{"location":"TygerFramework/API/GeneralAPI/#initialize","title":"Initialize  Syntax  Parameters","text":"<p>Call this when the <code>TygerFramework Plugin Initialize</code> export function gets called, and <code>before</code> you call any other API functions.</p> <pre><code>API::Initialize(param);\n</code></pre> <p><code>param</code></p> <p>Type: <code>TygerFrameworkPluginInitializeParam*</code></p> <p>The initialization parameter that gets passed to the plugin through the <code>TygerFramework Plugin Initialize</code> export function.</p>"},{"location":"TygerFramework/API/GeneralAPI/#isinitialized","title":"IsInitialized  Syntax  Return Value","text":"<p>Only in v1.1.0 or newer \u2193</p> <p>Call this to check if the API is initialized. Useful if you have a shutdown event and need to check if the API is initialized, to avoid a error occurring, incase the plugin unloaded early due to the wrong version of TygerFramework being installed</p> <pre><code>API::IsInitialize();\n</code></pre> <p><code>bool</code></p> <p>Returns <code>true</code> if the API has been initialized.</p>"},{"location":"TygerFramework/API/GeneralAPI/#currenttygame","title":"CurrentTyGame  Syntax  Return Value","text":"<p>Gets the currently running Ty Game</p> <pre><code>API::CurrentTyGame();\n</code></pre> <p><code>int</code></p> <p>Returns the current Ty game that is running.</p> <ul> <li>0: Couldn't detect which game</li> <li>1: Ty 1</li> <li>2: Ty 2</li> <li>3: Ty 3</li> </ul>"},{"location":"TygerFramework/API/GeneralAPI/#logpluginmessage","title":"LogPluginMessage  Syntax  Parameters","text":"<p>Logs a message to the log <code>txt file</code> and to the <code>console</code>.</p> <pre><code>API::LogPluginMessage(message, logLevel);\n</code></pre> <p><code>message</code></p> <p>Type: <code>std::string</code></p> <p>The message to be logged.</p> <p><code>logLevel</code></p> <p>Type: <code>LogLevel enum</code></p> <p>Default Value: <code>Info</code></p> <p>The type of message your logging. <code>Doesn't need to be set for info</code></p> <p>Enum Values</p> <ul> <li><code>Info</code></li> <li><code>Warning</code></li> <li><code>Error</code></li> </ul>"},{"location":"TygerFramework/API/GeneralAPI/#getplugindirectory","title":"GetPluginDirectory  Syntax  Return Value","text":"<p>Only in v1.1.0 or newer \u2193</p> <p>Gets the current plugin directory (is different between debug and release versions of TygerFramework. In debug versions its \"Debug Plugins\", in release versions its \"Plugins\")</p> <pre><code>API::GetPluginDirectory();\n</code></pre> <p><code>std::filesystem::path</code></p> <p>Returns the current path to the plugin directory.</p>"},{"location":"TygerFramework/API/GeneralAPI/#settyinputstate","title":"SetTyInputState  Syntax  Parameters  Return Value  Usage Examples  Remarks","text":"<p>Only in v1.1.0 or newer \u2193</p> <p>Sets the entire input flags state for the game from this plugin.</p> <pre><code>API::SetTyInputState(flags);\n</code></pre> <p><code>flags</code></p> <p>Type: <code>TyInputFlags enum</code></p> <p>To see all the flags that can be set look at the TyInputFlags section</p> <p><code>bool</code></p> <p>Returns <code>true</code> if the flags are successfully set.</p> <pre><code>//Sets the entire state to the NoMouseClickInput flag\nAPI::SetTyInputState(NoMouseClickInput);\n\n//Setting multiple flags\nAPI::SetTyInputState(NoMouseInput | NoKeyboardInput | TyShowCursor);\n</code></pre> <p>The state flags from all plugins get combined together in TygerFramework to decide the state of the game. This is to avoid one plugin disabling a flag that another plugin needs enabled</p>"},{"location":"TygerFramework/API/GeneralAPI/#settyinputflag","title":"SetTyInputFlag  Syntax  Parameters  Return Value  Usage Examples  Remarks","text":"<p>Only in v1.1.0 or newer \u2193</p> <p>Function to more easily set or unset a flag(s) in some cases</p> <pre><code>API::SetTyInputFlag(flag, enableFlag);\n</code></pre> <p><code>flags</code></p> <p>Type: <code>TyInputFlags enum</code></p> <p>To see all the flags that can be set look at the TyInputFlags section</p> <p><code>enableFlag</code></p> <p>Type: <code>bool</code></p> <p><code>true</code> to enable/set the flag, <code>false</code> to disable/unset the flag</p> <p><code>bool</code></p> <p>Returns true if successfully set the flags.</p> <pre><code>//Just setting 1 flag to be enabled, \n//without changing the state of any of the other flags that may be set\nAPI::SetTyInputFlag(NoMouseClickInput, true);\n\n//Unsetting/setting multiple flags\nAPI::SetTyInputFlag(NoMouseInput | NoKeyboardInput | TyShowCursor, false);\n</code></pre> <p>The state flags from all plugins get combined together in TygerFramework to decide the state of the game. This is to avoid one plugin disabling a flag that another plugin needs enabled</p>"},{"location":"TygerFramework/API/GeneralAPI/#gettyinputstate","title":"GetTyInputState  Syntax  Return Value  Usage Examples  Remarks","text":"<p>Only in v1.1.0 or newer \u2193</p> <p>Get the current input state of the game set by your plugin</p> <pre><code>API::GetTyInputState();\n</code></pre> <p><code>TyInputFlags enum</code></p> <p>Returns the currently set Ty Input Flags.</p> <pre><code>//Get the current flags\nTyInputFlags flags = API::GetTyInputState();\n\n//Which can then be used for something like toggling a flag with a bitwise XOR\n//Each time this is run it'll alternate between setting and unsetting the flag\nAPI::SetTyInputFlag(flags ^ NoMouseInput);\n\n//Can also be used to check if a specific flag(s) is set with the bitwise AND\nif (flags &amp; NoKeyboardInput){\n\n}\n</code></pre> <p>Keep in mind that this doesn't get the state of other plugins, so the game could be blocked by a different plugin, which this won't say.</p> <p>The state flags from all plugins get combined together in TygerFramework to decide the state of the game. This is to avoid one plugin disabling a flag that another plugin needs enabled</p>"},{"location":"TygerFramework/API/GeneralAPI/#variables","title":"Variables:","text":""},{"location":"TygerFramework/API/GeneralAPI/#tyhmodule","title":"TyHModule  Syntax","text":"<p>Can be used to get the base address of the game by casting it to a <code>DWORD</code>.</p> v1.0.1v1.0.0 <pre><code>API::Get()-&gt;param()-&gt;TyHModule;\n</code></pre> <pre><code>API::Get()-&gt;param()-&gt;tygerFrameworkModule;\n</code></pre> <p>Type: <code>HMODULE</code></p>"},{"location":"TygerFramework/API/GeneralAPI/#initerrormessage","title":"initErrorMessage  Syntax","text":"<p>Only to be used for when you would <code>return false</code> in the <code>TygerFramework Plugin Initialize</code> export function. More info on the Error Message section on the Getting Started page</p> <p>Gives more info for what went <code>wrong</code> during initialization of your plugin.</p> <p><pre><code>API::Get()-&gt;param()-&gt;initErrorMessage = \"Write what went wrong here\";\n</code></pre> Type: <code>std::string</code></p>"},{"location":"TygerFramework/API/GeneralAPI/#tyinputsflags","title":"TyInputsFlags","text":"<p>Only in v1.1.0 or newer \u2193</p> <p>Used in the SetTyInputState, SetTyInputFlag, and GetTyInputState functions</p> <p>Type: <code>enum</code></p> <p>Enum Values</p> <ul> <li><code>None //No flags set</code></li> <li><code>NoMouseClickInput //Only mouse clicks disabled</code></li> <li><code>NoMouseCameraInput //Only mouse camera movement disabled</code></li> <li><code>NoKeyboardInput //Disables all keyboard input</code></li> <li><code>TyShowCursor //Shows and unlocks the mouse cursor</code></li> <li><code>NoMouseInput //Disables both mouse clicks and mouse camera movement</code></li> </ul>"},{"location":"TygerFramework/API/ImGuiAPI/","title":"API for ImGui","text":"<p>For more specific examples on how to use the functions you can look through the Example Plugin</p>"},{"location":"TygerFramework/API/ImGuiAPI/#gettywindowhandle","title":"GetTyWindowHandle","text":"Syntax  <pre><code>API::GetTyWindowHandle();\n</code></pre>  Return Value  <p><code>HWND</code></p> <p>Returns the current Ty window handle. </p> <p>It will be a <code>nullptr</code> if the Ty window hasn't shown yet or TygerFramework had a issue getting the handle (most of the time it should be fine).</p>"},{"location":"TygerFramework/API/ImGuiAPI/#drawinggui","title":"DrawingGUI","text":"Syntax  <pre><code>API::DrawingGUI();\n</code></pre>  Return Value  <p><code>bool</code></p> <p>Returns <code>true</code> if the TygerFramework menu is currently open.</p>"},{"location":"TygerFramework/API/ImGuiAPI/#setimguifont","title":"SetImGuiFont","text":"<p>Sets the ImGui font to be the same as TygerFramework's main window</p>  Syntax  <pre><code>API::SetImGuiFont(ImGui::GetIO().Fonts);\n</code></pre>  Parameters  <p><code>imguiFont</code></p> <p>Type: <code>void*</code></p> <p>Your ImGui Font pointer.</p>"},{"location":"TygerFramework/API/ImGuiAPI/#settygerframeworkimguielements","title":"SetTygerFrameworkImGuiElements","text":"<p><code>Doesn't Need ImGui Installed</code></p> <p>Sets the elements from the plugin that will be drawn below the plugin section in the TygerFramework ImGui window.</p> <p><code>Overwrites</code> the old value if its called again</p>  Syntax  <pre><code>API::SetTygerFrameworkImGuiElements(elements)\n</code></pre>  Parameters  <p><code>elements</code></p> <p>Type: <code>std::vector&lt;TygerFrameworkImGuiParam&gt;</code></p> <p>All the elements that will be rendered in the TygerFramework ImGui window.</p> <p><code>TygerFrameworkImGuiParam</code></p> <p>Type: <code>struct</code></p> <ul> <li>First element is a <code>enum</code> for which element to draw</li> <li>Second element is a <code>std::string</code> for if the element needs text</li> </ul> <p>Enum values:</p> <ul> <li><code>CollapsingHeader //Needs text for header name</code></li> <li><code>Text //Needs text</code></li> <li><code>TextWrapped //Needs text</code></li> <li><code>SameLine //No text</code></li> <li><code>NewLine //No text</code></li> <li><code>Spacing //No text</code></li> <li><code>SetTooltip //Needs text for tooltip (Adds a tooltip to the previous element)</code></li> <li><code>TreePush //Needs text for tree internal name</code></li> <li><code>TreePop //No text (Make sure to call when done after using TreePush)</code></li> </ul>  Usage Example  <pre><code>void GUI::SetFrameworkImGuiElements()\n{\n    namespace fs = std::filesystem;\n    //Setting the values for GUI to render on the TygerFramework window\n    //Only a few basic elements available as its mainly intended to \n    //just be for adding basic stuff to the TygerFramework window \n    std::vector&lt;TygerFrameworkImGuiParam&gt; TygerFrameworkImguiElements = { \n        {CollapsingHeader, \"Example Plugin\"},\n        {Text, \"Files in Ty Directory Example\"},\n        {SameLine},\n        {Text, \"(?)\"},\n        {SetTooltip, \"Just an Example of Iterating and Adding Elements\"},\n        {TreePush, \"Example Plugin\"} };\n    //Looping through elements and adding them \n    //as a example of iterating and adding elements\n    for (auto&amp;&amp; entry : fs::directory_iterator{ fs::current_path() }) {\n        auto&amp;&amp; path = entry.path();\n        TygerFrameworkImguiElements.push_back({ Text, path.filename().string()});\n    }\n\n    TygerFrameworkImguiElements.push_back({ TreePop });\n\n    API::SetTygerFrameworkImGuiElements(TygerFrameworkImguiElements);\n\n    API::LogPluginMessage(\"Set TygerFramework ImGui Functions\");\n}\n</code></pre>"},{"location":"TygerFramework/TygerMemory/Setup/","title":"Quickstart","text":"<p>Note</p> <p>TygerMemory is a dependency used by TygerFramework and as such should be used with TygerFramework. While it can be used separately, this may require more extensive linker settings and setup.</p>"},{"location":"TygerFramework/TygerMemory/Setup/#what-is-tyger-memory","title":"What is Tyger Memory?","text":"<p>Tyger Memory is an extension to the Tyger Framework API which exposes high level functions and structures for manipulating the running memory of the games to developers, handling the low level calls in the background. </p> <p>Compatibility</p> <p>So far, only Ty the Tasmanian Tiger 1 is supported by TygerMemory. The functions provided by the API will produce undefined behaivour on the other games. TygerMemory2 and TygerMemory3 may be created in the future. </p> <p>If you're only looking to use plugins and someone has sent you to this page, all you need to do is download the correct (usually the latest) version of the TygerMemory.dll and add it to your 'Plugins/Dependencies' directory. The other files are not needed.</p> <p>If you're here as a developer wanting to make a plugin, you're best starting with setting up TygerFramework. Once you have your first plugin building, it's time to implement TygerMemory.</p>"},{"location":"TygerFramework/TygerMemory/Setup/#adding-tygermemory","title":"Adding TygerMemory","text":"<p>The first thing you'll need to do is head over to the TygerMemory1 Github releases page and download the TygerMemoryAPI.zip. This file contains all of the required header files in an include folder as well as the .lib build of the API. </p> <p>Note</p> <p>The following section assumes you are using a Visual Studio C++ dll project without CMake. This isn't necessary but the steps will be different for CMake builds.</p> <p>Add the include directory to your project include directories by right-clicking the project in the solution explorer and going to Properties -&gt; Configuration Properties -&gt; Include Directories</p> <p>Set the linker to link TygerMemory.lib by right-clicking your project and choosing Add -&gt; Existing Item and selecting TygerMemory.lib. This will add the library as source. Along with the header files being included, this is sufficient for usage.</p> <p>If you're developing several plugins, you may either</p> <ul> <li> <p>Keep a single instance of the API files somewhere and have all projects reference it. This way, you only need to update the single instance and then your projects' references to the API files when a new update is released.</p> </li> <li> <p>Copy the API files you your project each time so that each project is built with a specific version of the API. If, for a given project, you don't expect to need new features as they are released, this is the better option.</p> </li> </ul> <p>Make sure the header files and the library you are using are from the same build of the API. Mismatched versions often lead to linker or invalid dll entry point errors.</p>"},{"location":"TygerFramework/TygerMemory/Setup/#starting-coding","title":"Starting Coding","text":"<p>Once you're set up, you need to include the \"core.h\" header file in your plugin's entry point. After initializing or in the initialization method for TygerFramework, you can call</p> <pre><code>Core::initialize((HMODULE)API::Get()-&gt;param()-&gt;TyHModule);\n</code></pre> <p>This initializes the API to allow it to read from the game's memory by providing it the .exe module handle.</p> <p>The Ty Collectible Tracker Plugin can be used as an example in case you get stuck.</p>"},{"location":"TygerFramework/TygerMemory/Setup/#next-steps","title":"Next Steps","text":"<p>Now you're set up, you can use any of the many classes to interact with Ty's memory. The docs here provide descriptions of each of the functions and their limitations but these are also provided via xml tags on the functions themselves.</p> <p>A good starting place for understanding how to work with TygerMemory is the hero class</p>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/","title":"Camera","text":"<p>The <code>Camera</code> class provides static methods for managing the camera's state, position, rotation, and various configuration settings in the game environment. These methods allow for getting and setting camera properties, enabling precise control over the player's view and experience.</p>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#getcamerastate","title":"<code>getCameraState</code>","text":"<pre><code>static CameraState getCameraState();\n</code></pre> <p>Retrieves the current state of the camera.</p> <p>Returns:</p> <ul> <li><code>CameraState</code>: The current camera state.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#setcamerastate","title":"<code>setCameraState</code>","text":"<pre><code>static void setCameraState(CameraState state);\n</code></pre> <p>Sets the state of the camera to a specified <code>CameraState</code>.</p> <p>Parameters:</p> <ul> <li><code>CameraState state</code>: The new state to apply to the camera.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#getcameraposition","title":"<code>getCameraPosition</code>","text":"<pre><code>static Vector3f getCameraPosition();\n</code></pre> <p>Returns the camera\u2019s current position in the game world.</p> <p>Returns:</p> <ul> <li><code>Vector3f</code>: A vector representing the camera's position in 3D space.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#setcameraposition","title":"<code>setCameraPosition</code>","text":"<pre><code>static void setCameraPosition(Vector3f position);\n</code></pre> <p>Sets the camera\u2019s position to a specified 3D coordinate.</p> <p>Parameters:</p> <ul> <li><code>Vector3f position</code>: The new position for the camera.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#getcamerarotation","title":"<code>getCameraRotation</code>","text":"<pre><code>static Vector3f getCameraRotation();\n</code></pre> <p>Retrieves the camera\u2019s current rotation.</p> <p>Returns:</p> <ul> <li><code>Vector3f</code>: A vector representing the camera's rotation in 3D space.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#setcamerarotation","title":"<code>setCameraRotation</code>","text":"<pre><code>static void setCameraRotation(Vector3f rotation);\n</code></pre> <p>Sets the camera's rotation to a specified orientation.</p> <p>Parameters:</p> <ul> <li><code>Vector3f rotation</code>: The new rotation for the camera.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#getfreecamspeed","title":"<code>getFreeCamSpeed</code>","text":"<pre><code>static float getFreeCamSpeed();\n</code></pre> <p>Retrieves the current speed of the free camera mode, useful for controlling the camera's movement rate.</p> <p>Returns:</p> <ul> <li><code>float</code>: The speed of the free camera.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#setfreecamspeed","title":"<code>setFreeCamSpeed</code>","text":"<pre><code>static void setFreeCamSpeed(float speed = 0.6f);\n</code></pre> <p>Sets the speed of the free camera mode.</p> <p>Parameters:</p> <ul> <li><code>float speed</code>: The new speed for the free camera (default is 0.6f).</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#getcameradistance","title":"<code>getCameraDistance</code>","text":"<pre><code>static float getCameraDistance();\n</code></pre> <p>Returns the current distance between the camera and the target.</p> <p>Returns:</p> <ul> <li><code>float</code>: The distance from the camera to the target.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#setcameradistance","title":"<code>setCameraDistance</code>","text":"<pre><code>static void setCameraDistance(float distance);\n</code></pre> <p>Sets the camera\u2019s distance from its target.</p> <p>Parameters:</p> <ul> <li><code>float distance</code>: The new distance for the camera from its target.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#setcameradistancevalue","title":"<code>setCameraDistanceValue</code>","text":"<pre><code>static void setCameraDistanceValue(CameraDistanceLevel level, float distance);\n</code></pre> <p>Sets the camera distance at a specific <code>CameraDistanceLevel</code>, such as low, mid, or high.</p> <p>Parameters:</p> <ul> <li><code>CameraDistanceLevel level</code>: The preset distance level (e.g., <code>LOW</code>, <code>MID</code>, or <code>HIGH</code>).</li> <li><code>float distance</code>: The distance value for the specified level.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Camera/#setcameragoof","title":"<code>setCameraGoof</code>","text":"<pre><code>static void setCameraGoof(float value = 1.0);\n</code></pre> <p>Sets the cameras \"goof\" value. Just try it and enjoy :)</p> <p>Parameters:</p> <ul> <li><code>float value</code>: The goof value for the camera (default is 1.0).</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/","title":"Hero","text":"<p>The <code>Hero</code> class provides static methods for controlling and retrieving the state, position, and physical properties of a game character. Each method is documented below with its return types, parameters, and purpose.</p>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setstateint-state","title":"<code>setState(int state)</code>","text":"<pre><code>static void setState(int state);\n</code></pre> <p>Sets the hero's state using an integer identifier.</p> <p>Warning</p> <p>This assumes the state is valid for the current hero. Providing an invalid state may cause game-breaking behaviour.</p> <p>Parameters:</p> <ul> <li><code>int state</code>: The integer identifier representing the new state of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setstatebullstate-state","title":"<code>setState(BullState state)</code>","text":"<pre><code>static void setState(BullState state);\n</code></pre> <p>Sets the hero's state if it corresponds to the <code>BullState</code> type.</p> <p>Warning</p> <p>This assumes the current hero is <code>BushPig</code>. Providing an invalid state may cause game-breaking behaviour.</p> <p>Parameters:</p> <ul> <li><code>BullState state</code>: The new state for <code>BushPig</code>.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setstatetystate-state","title":"<code>setState(TyState state)</code>","text":"<pre><code>static void setState(TyState state);\n</code></pre> <p>Sets the hero's state if it corresponds to the <code>TyState</code> type.</p> <p>Warning</p> <p>This assumes the current hero is <code>Ty</code>. Providing an invalid state may cause game-breaking behaviour.</p> <p>Parameters:</p> <ul> <li><code>TyState state</code>: The new state for <code>Ty</code>.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getstate","title":"<code>getState</code>","text":"<pre><code>static int getState();\n</code></pre> <p>Retrieves the current integer-based state of the hero. The state will be for the currently active hero. This can then be cast to either of the hero state types depending on the current hero.</p> <p>Tip</p> <p>You can use <code>isBull()</code> to determine which hero is currently active.</p> <p>Returns:</p> <ul> <li><code>int</code>: The current state of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getposition","title":"<code>getPosition</code>","text":"<pre><code>static Vector3f getPosition();\n</code></pre> <p>Returns the current position of the hero in 3D space as a <code>Vector3f</code> object.</p> <p>Returns:</p> <ul> <li><code>Vector3f</code>: The current coordinates of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setposition","title":"<code>setPosition</code>","text":"<pre><code>static void setPosition(Vector3f coords);\n</code></pre> <p>Sets the hero's position to the specified coordinates.</p> <p>Parameters:</p> <ul> <li><code>Vector3f coords</code>: The new 3D position of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#gethealth","title":"<code>getHealth</code>","text":"<pre><code>static int getHealth();\n</code></pre> <p>Retrieves the current health level of the hero. A single paw is 4 health by default.</p> <p>Returns:</p> <ul> <li><code>int</code>: The hero's current health.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#sethealth","title":"<code>setHealth</code>","text":"<pre><code>static void setHealth(int health);\n</code></pre> <p>Sets the hero's health to the specified value. A single paw is 4 health by default.</p> <p>Parameters:</p> <ul> <li><code>int health</code>: The new health value of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getbreath","title":"<code>getBreath</code>","text":"<pre><code>static int getBreath();\n</code></pre> <p>Retrieves the current breath level of the hero. </p> <p>Only applies while underwater and returns <code>0</code> if the currently active hero is <code>BushPig</code>.</p> <p>Returns:</p> <ul> <li><code>int</code>: The current breath level of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setbreath","title":"<code>setBreath</code>","text":"<pre><code>static void setBreath(int breath);\n</code></pre> <p>Sets the hero's breath level.</p> <p>Only applies while underwater and returns early if the currently active hero is <code>BushPig</code>.</p> <p>Parameters:</p> <ul> <li><code>int breath</code>: The new breath value of the hero.</li> </ul> <p>Info</p> <p>Many of the setters for the movements attributes which follow have default values for their parameters meaning they can be called with no arguments to reset the values to default.</p>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getswimspeed","title":"<code>getSwimSpeed</code>","text":"<pre><code>static float getSwimSpeed();\n</code></pre> <p>Retrieves the hero's swimming speed.</p> <p>Returns:</p> <ul> <li><code>float</code>: The swimming speed of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setswimspeed","title":"<code>setSwimSpeed</code>","text":"<pre><code>static void setSwimSpeed(float speed = 20.0f);\n</code></pre> <p>Sets the hero's swimming speed. Default value is <code>20.0f</code>.</p> <p>Parameters:</p> <ul> <li><code>float speed</code>: The new swimming speed of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getrunspeed","title":"<code>getRunSpeed</code>","text":"<pre><code>static float getRunSpeed();\n</code></pre> <p>Retrieves the hero's running speed.</p> <p>Returns:</p> <ul> <li><code>float</code>: The running speed of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setrunspeed","title":"<code>setRunSpeed</code>","text":"<pre><code>static void setRunSpeed(float speed = 10.0f);\n</code></pre> <p>Sets the hero's running speed. Default value is <code>10.0f</code>.</p> <p>Parameters:</p> <ul> <li><code>float speed</code>: The new running speed of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getairspeed","title":"<code>getAirSpeed</code>","text":"<pre><code>static float getAirSpeed();\n</code></pre> <p>Retrieves the hero's airborne speed.</p> <p>Returns:</p> <ul> <li><code>float</code>: The air speed of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setairspeed","title":"<code>setAirSpeed</code>","text":"<pre><code>static void setAirSpeed(float speed = 10.0f);\n</code></pre> <p>Sets the hero's speed when airborne. Default value is <code>10.0f</code>.</p> <p>Parameters:</p> <ul> <li><code>float speed</code>: The new air speed of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getjumpheight","title":"<code>getJumpHeight</code>","text":"<pre><code>static float getJumpHeight();\n</code></pre> <p>Retrieves the hero's default jump height.</p> <p>Returns:</p> <ul> <li><code>float</code>: The default jump height of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setjumpheight","title":"<code>setJumpHeight</code>","text":"<pre><code>static void setJumpHeight(float height = 18.57f);\n</code></pre> <p>Sets the hero's jump height. Default value is <code>18.57f</code>.</p> <p>Parameters:</p> <ul> <li><code>float height</code>: The new jump height of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getdoublejumpheight","title":"<code>getDoubleJumpHeight</code>","text":"<pre><code>static float getDoubleJumpHeight();\n</code></pre> <p>Retrieves the height for the hero's double jump.</p> <p>Returns:</p> <ul> <li><code>float</code>: The double jump height.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setdoublejumpheight","title":"<code>setDoubleJumpHeight</code>","text":"<pre><code>static void setDoubleJumpHeight(float height = 8.37f);\n</code></pre> <p>Sets the height of the hero's double jump. Default value is <code>8.37f</code>.</p> <p>Parameters:</p> <ul> <li><code>float height</code>: The new double jump height.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getledgegrabtolerance","title":"<code>getLedgeGrabTolerance</code>","text":"<pre><code>static float getLedgeGrabTolerance();\n</code></pre> <p>Returns the tolerance level when the hero grabs a ledge.</p> <p>Returns:</p> <ul> <li><code>float</code>: The ledge grab tolerance.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setledgegrabtolerance","title":"<code>setLedgeGrabTolerance</code>","text":"<pre><code>static void setLedgeGrabTolerance(float tolerance = 20.0f);\n</code></pre> <p>Sets the hero's tolerance for ledge grabs. Default value is <code>20.0f</code>.</p> <p>Parameters:</p> <ul> <li><code>float tolerance</code>: The new ledge grab tolerance.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getglidespeed","title":"<code>getGlideSpeed</code>","text":"<pre><code>static float getGlideSpeed();\n</code></pre> <p>Retrieves the hero's gliding speed.</p> <p>Returns:</p> <ul> <li><code>float</code>: The glide speed of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setglidespeed","title":"<code>setGlideSpeed</code>","text":"<pre><code>static void setGlideSpeed(float speed = 7.0f);\n</code></pre> <p>Sets the hero's gliding speed. Default value is <code>7.0f</code>.</p> <p>Parameters:</p> <ul> <li><code>float speed</code>: The new glide speed of the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getgravity","title":"<code>getGravity</code>","text":"<pre><code>static float getGravity();\n</code></pre> <p>Retrieves the current gravity affecting the hero.</p> <p>Returns:</p> <ul> <li><code>float</code>: The gravity level affecting the hero.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setgravity","title":"<code>setGravity</code>","text":"<pre><code>static void setGravity(float gravity = 0.75f);\n</code></pre> <p>Sets the gravity value for the hero. Default value is <code>0.75f</code>.</p> <p>Parameters:</p> <ul> <li><code>float gravity</code>: The new gravity value.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#getinvincibility","title":"<code>getInvincibility</code>","text":"<pre><code>static bool getInvincibility();\n</code></pre> <p>Checks if the hero is invincible.</p> <p>Returns:</p> <ul> <li><code>bool</code>: <code>true</code> if the hero is invincible; otherwise, <code>false</code>.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setinvincibility","title":"<code>setInvincibility</code>","text":"<pre><code>static void setInvincibility(bool status);\n</code></pre> <p>Sets the hero's invincibility status.</p> <p>Parameters:</p> <ul> <li><code>bool status</code>: <code>true</code> to make the hero invincible; <code>false</code> otherwise.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#kill","title":"<code>kill</code>","text":"<pre><code>static void kill();\n</code></pre> <p>Triggers the hero's death by setting state to <code>dying</code>. </p> <p>Automatically sets the correct state depending on the currently active hero.</p>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#setmainskin","title":"<code>setMainSkin</code>","text":"<pre><code>static void setMainSkin(int index);\n</code></pre> <p>Sets the hero's main skin based on an index.</p> <p>This does not include the eye skin.</p> <p>Parameters:</p> <ul> <li><code>int index</code>: The skin index.</li> </ul>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#resetvalues","title":"<code>resetValues</code>","text":"<pre><code>static void resetValues();\n</code></pre> <p>Resets all attributes of the hero to default values.</p>"},{"location":"TygerFramework/TygerMemory/Classes/Hero/#isbull","title":"<code>isBull</code>","text":"<pre><code>static bool isBull();\n</code></pre> <p>Checks if the currently active hero is <code>BushPig</code>.</p> <p>Returns:</p> <ul> <li><code>bool</code>: <code>true</code> if the hero is <code>BushPig</code>; otherwise, <code>false</code>.</li> </ul>"}]}